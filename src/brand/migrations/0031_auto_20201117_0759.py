# Generated by Django 2.2 on 2020-11-17 07:59

from django.db import migrations, models
import django.db.models.deletion
from brand.models import LicenseRole as LicenseRoleModel

def create_roles(apps, schema_editor):
    LicenseRole = apps.get_model("brand", "LicenseRole")
    for role_name, _ in LicenseRoleModel.ROLE_CHOICES:
        LicenseRole.objects.get_or_create(name=role_name)

def create_roles_reverse(apps, schema_editor):
    pass

def forward_func(apps, schema_editor):
    LicenseUser = apps.get_model("brand", "LicenseUser")
    LicenseRole = apps.get_model("brand", "LicenseRole")
    for license_user in LicenseUser.objects.all():
        if license_user.role2:
            for role2_name in license_user.role2:
                role, _ = LicenseRole.objects.get_or_create(name=role2_name)
                license_user.role.add(role)
            license_user.save()

def reverse_func(apps, schema_editor):
    LicenseUser = apps.get_model("brand", "LicenseUser")
    for license_user in LicenseUser.objects.all():
        license_user.role2 = [ x.name for x in license_user.role.all()]
        license_user.save()


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('brand', '0030_auto_20201110_1322'),
    ]

    operations = [
        migrations.CreateModel(
            name='LicenseRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(choices=[('owner', 'Owner'), ('license_owner', 'License Owner'), ('farm_manager', 'Farm Manager'), ('logistics', 'Logistics'), ('sales_or_inventory', 'Sales or Inventory'), ('billing', 'Billing')], max_length=60, unique=True, verbose_name='Name')),
                ('default_permissions', models.ManyToManyField(blank=True, limit_choices_to=models.Q(content_type__app_label='brand'), to='auth.Permission', verbose_name='Default Permissions')),
            ],
            options={
                'verbose_name': 'License Role',
                'verbose_name_plural': 'License Roles',
            },
        ),
        migrations.RunPython(create_roles, reverse_code=create_roles_reverse),
        migrations.AlterModelOptions(
            name='licenseuser',
            options={'verbose_name': 'License Profile User', 'verbose_name_plural': 'License Profile Users'},
        ),

        migrations.RenameField(
            model_name='licenseuser',
            old_name='role',
            new_name='role2',
        ),
        migrations.AddField(
            model_name='licenseuser',
            name='role',
            field=models.ManyToManyField(related_name='license_users', to='brand.LicenseRole', verbose_name='Role'),
        ),
        migrations.AlterField(
            model_name='licenseuser',
            name='role2',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('owner', 'Owner'), ('license_owner', 'License Owner'), ('farm_manager', 'Farm Manager'), ('logistics', 'Logistics'), ('sales_or_inventory', 'Sales or Inventory'), ('billing', 'Billing')], help_text='choice options are 1.license_owner 2.farm_manager 3.logistics 4.sales_or_inventory 5.billing', max_length=60, verbose_name='Role'), default=list, size=None),
        ),
        migrations.RunPython(forward_func, reverse_code=reverse_func),
        migrations.RemoveField(
            model_name='licenseuser',
            name='role2',
        ),
        migrations.CreateModel(
            name='LicenseRolePermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('license', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='license_role_permissions', to='brand.License', verbose_name='License')),
                ('permissions', models.ManyToManyField(blank=True, limit_choices_to=models.Q(content_type__app_label='brand'), to='auth.Permission', verbose_name='License Role Permissions')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='license_role_permissions', to='brand.LicenseRole', verbose_name='Role')),
            ],
            options={
                'verbose_name': 'License Role Permissions',
                'verbose_name_plural': 'License Roles Permissions',
                'unique_together': {('license', 'role')},
            },
        ),
    ]
