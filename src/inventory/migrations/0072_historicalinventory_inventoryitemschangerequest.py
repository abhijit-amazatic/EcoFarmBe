# Generated by Django 2.2 on 2021-03-26 13:27

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import inventory.models
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('cultivar', '0007_auto_20210309_0544'),
        ('labtest', '0005_auto_20200924_0955'),
        ('inventory', '0071_auto_20210318_0419'),
    ]

    operations = [
        migrations.CreateModel(
            name='InventoryItemsChangeRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('quantity_available', models.FloatField(blank=True, null=True, verbose_name='Quantity Available')),
                ('batch_availability_date', models.DateField(blank=True, default=None, null=True, verbose_name='Batch Availability Date')),
                ('farm_price', models.FloatField(blank=True, null=True, verbose_name='Farm Price')),
                ('pricing_position', models.CharField(blank=True, choices=[('Negotiable', 'Negotiable'), ('Firm', 'Firm'), ('Min Quantity', 'Min Quantity'), ('Offers Open', 'Offers Open')], max_length=255, null=True, verbose_name='Pricing Position')),
                ('have_minimum_order_quantity', models.BooleanField(default=False, verbose_name='Minimum Order Quantity')),
                ('minimum_order_quantity', models.FloatField(blank=True, null=True, verbose_name='Minimum Order Quantity(lbs)')),
                ('payment_terms', models.CharField(blank=True, choices=[('60 Days', '60 Days'), ('21 Days', '21 Days')], max_length=50, null=True, verbose_name='Payment Terms')),
                ('payment_method', inventory.models.ChoiceArrayField(base_field=models.CharField(choices=[('Cash', 'Cash'), ('ACH', 'ACH'), ('Check', 'Check'), ('Bank Wire', 'Bank Wire')], max_length=100, verbose_name='Payment Method'), default=list, size=None)),
                ('status', models.CharField(choices=[('pending_for_approval', 'Pending For Approval'), ('approved', 'Approved')], default='pending_for_approval', max_length=255, verbose_name='Status')),
                ('created_by', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True, verbose_name='Created by')),
                ('approved_by', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True, verbose_name='Approved by')),
                ('approved_on', models.DateTimeField(blank=True, default=None, null=True, verbose_name='Approved on')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='change_request', to='inventory.Inventory', verbose_name='item')),
            ],
            options={
                'verbose_name': 'Inventory Items Change Request',
                'verbose_name_plural': 'Inventory Items Change Requests',
            },
        ),
        migrations.CreateModel(
            name='HistoricalInventory',
            fields=[
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP address')),
                ('created_time', models.DateTimeField()),
                ('last_modified_time', models.DateTimeField()),
                ('item_id', models.CharField(db_index=True, max_length=50, verbose_name='Item ID')),
                ('item_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Item Type')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('sku', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='SKU')),
                ('image_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Image Name')),
                ('image_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Image Type')),
                ('manufacturer', models.CharField(blank=True, max_length=100, null=True, verbose_name='Manufracturer')),
                ('category_name', models.CharField(max_length=50, verbose_name='Category Name')),
                ('category_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Category ID')),
                ('vendor_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Vendor Name')),
                ('unit', models.CharField(blank=True, max_length=20, null=True, verbose_name='Unit')),
                ('status', models.CharField(blank=True, max_length=20, null=True, verbose_name='Status')),
                ('zcrm_product_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='CRM Product ID')),
                ('is_combined_product', models.BooleanField(blank=True, null=True, verbose_name='Is Combined Product')),
                ('account_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Account ID')),
                ('account_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Account Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('brand', models.CharField(blank=True, max_length=50, null=True, verbose_name='Brand')),
                ('price', models.FloatField(verbose_name='Price')),
                ('purchase_rate', models.FloatField(verbose_name='Purchase Rate')),
                ('tax_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Tax ID')),
                ('tax_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Tax Name')),
                ('tax_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Tax Type')),
                ('tax_percentage', models.FloatField(verbose_name='Tax Percentage')),
                ('purchase_account_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Purchase Account Name')),
                ('product_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Product Type')),
                ('is_taxable', models.BooleanField(blank=True, null=True, verbose_name='Is Taxable')),
                ('is_returnable', models.BooleanField(blank=True, null=True, verbose_name='Is Returnable')),
                ('tax_exemption_code', models.CharField(blank=True, max_length=100, null=True, verbose_name='Tax Excemption Code')),
                ('total_initial_stock', models.FloatField(blank=True, null=True, verbose_name='Total Initial Stock')),
                ('stock_on_hand', models.FloatField(blank=True, null=True, verbose_name='Stock On Hand')),
                ('available_stock', models.FloatField(blank=True, null=True, verbose_name='Availabe Stock')),
                ('cf_strain_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Strain Name')),
                ('cf_cultivation_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Cultivation Type')),
                ('cf_cannabis_grade_and_category', models.CharField(blank=True, max_length=100, null=True, verbose_name='Cannabis Grade and Category')),
                ('cf_client_code', models.CharField(blank=True, max_length=50, null=True, verbose_name='Client Code')),
                ('cf_lab_file', models.URLField(blank=True, max_length=255, null=True, verbose_name='Lab File')),
                ('cf_pending_sale', models.CharField(blank=True, max_length=255, null=True, verbose_name='Pending Sale')),
                ('cf_cultivar_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Cultivar Type')),
                ('cf_procurement_rep', models.CharField(blank=True, max_length=50, null=True, verbose_name='Procurement Rep')),
                ('cf_cfi_published', models.BooleanField(blank=True, null=True, verbose_name='CFI_Published')),
                ('cf_ifp_farm', models.BooleanField(blank=True, null=True, verbose_name='IFP_Farm')),
                ('cf_vendor_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Vendor Name')),
                ('county_grown', models.CharField(blank=True, max_length=50, null=True, verbose_name='County Grown')),
                ('cf_procurement_confirmed', models.CharField(blank=True, max_length=50, null=True, verbose_name='PnC')),
                ('cf_marge_per_unit', models.FloatField(blank=True, null=True, verbose_name='Margin Per Unit')),
                ('cf_lpn', models.CharField(blank=True, max_length=50, null=True, verbose_name='LPN')),
                ('cf_received_date', models.CharField(blank=True, max_length=50, null=True, verbose_name='Received Date')),
                ('cf_pending_sale_1_1', models.CharField(blank=True, max_length=100, null=True, verbose_name='Pending Sale 1')),
                ('cf_pending_sale_2', models.CharField(blank=True, max_length=100, null=True, verbose_name='Pending Sale 2')),
                ('cf_pending_sale_3', models.CharField(blank=True, max_length=100, null=True, verbose_name='Pending Sale 3')),
                ('cf_metrc_manifest_number', models.TextField(blank=True, null=True, verbose_name='Metrc Manifest Number')),
                ('cf_harvest', models.CharField(blank=True, max_length=50, null=True, verbose_name='Harvest')),
                ('cf_metrc_packages', models.TextField(blank=True, null=True, verbose_name='Metrc Package')),
                ('cf_payment_terms', models.CharField(blank=True, max_length=255, null=True, verbose_name='Payment Terms')),
                ('cf_lab_test_link', models.URLField(blank=True, max_length=255, null=True, verbose_name='Lab Test Link')),
                ('cf_testing_type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, null=True, size=None)),
                ('cf_pesticide_summary', models.CharField(blank=True, max_length=255, null=True, verbose_name='Pesticide Summary')),
                ('cf_next_harvest_date', models.DateField(blank=True, default=None, null=True)),
                ('purchase_account_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='Purchase Account Id')),
                ('inventory_account_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='Inventory Account Id')),
                ('inventory_account_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Inventory Account Name')),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, null=True, size=None)),
                ('available_for_sale_stock', models.FloatField(blank=True, null=True, verbose_name='Available For Sale Stock')),
                ('actual_available_for_sale_stock', models.FloatField(blank=True, null=True, verbose_name='Actual Available For Sale Stock')),
                ('actual_available_stock', models.FloatField(blank=True, null=True, verbose_name='Actual Available For Sale Stock')),
                ('cf_manufacturing_date', models.DateField(blank=True, default=None, null=True)),
                ('cf_batch_blending', models.CharField(blank=True, max_length=100, null=True, verbose_name='Batch Blending')),
                ('cf_lab_testing_status', models.URLField(blank=True, max_length=255, null=True, verbose_name='Lab Testing Status')),
                ('cf_qa_intake_grading_sheet_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='Qa Intake Grading Sheet Id')),
                ('cf_administrative_hold', models.CharField(blank=True, max_length=100, null=True, verbose_name='Administrative Hold')),
                ('cf_batch_notes', models.TextField(blank=True, null=True, verbose_name='Batch Notes')),
                ('cf_lab_test_results_box_url', models.URLField(blank=True, max_length=255, null=True, verbose_name='Lab Test Results Box Url')),
                ('track_batch_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='Track Batch Number')),
                ('cf_date_available', models.DateField(blank=True, default=None, null=True)),
                ('cf_status', models.CharField(blank=True, max_length=100, null=True, verbose_name='Status')),
                ('cf_lab_test_sample_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='cf_lab_test_sample_id')),
                ('cf_quantity_estimate', models.FloatField(blank=True, null=True, verbose_name='cf_quantity_estimate')),
                ('cf_metrc_source_package_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='cf_metrc_source_package_id')),
                ('cf_market_feedback', models.TextField(blank=True, null=True, verbose_name='cf_market_feedback')),
                ('cf_sample_in_house', models.CharField(blank=True, max_length=100, null=True, verbose_name='Sample In House')),
                ('cf_seller_position', models.CharField(blank=True, max_length=100, null=True, verbose_name='Seller Position')),
                ('cf_farm_price', models.CharField(blank=True, max_length=100, null=True, verbose_name='Farm Price')),
                ('cf_farm_price_2', models.FloatField(blank=True, null=True, verbose_name='Farm Price')),
                ('cf_minimum_quantity', models.FloatField(blank=True, null=True, verbose_name='Minimum Quantity')),
                ('cf_available_date', models.DateField(blank=True, default=None, null=True)),
                ('package_details', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('documents', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, null=True, size=None)),
                ('batches', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.jsonb.JSONField(default=dict), blank=True, null=True, size=None)),
                ('pre_tax_price', models.FloatField(blank=True, null=True, verbose_name='pre_tax_price')),
                ('current_price_change', models.FloatField(blank=True, null=True, verbose_name='Current Price Change')),
                ('parent_category_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Parent Category Name')),
                ('inventory_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Inventory Name')),
                ('thumbnail_url', models.CharField(blank=True, max_length=500, null=True, verbose_name='Thumbnail Url')),
                ('nutrients', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, null=True, size=None)),
                ('ethics_and_certification', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, null=True, size=None)),
                ('history_change_reason', models.TextField(null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('cultivar', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='cultivar.Cultivar', verbose_name='Cultivar')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('labtest', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='labtest.LabTest', verbose_name='LabTest')),
            ],
            options={
                'verbose_name': 'historical inventory',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
