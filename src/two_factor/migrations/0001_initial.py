# Generated by Django 2.2 on 2020-10-13 06:22

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
import two_factor.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthyOneTouchDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confirmed', models.BooleanField(default=False, help_text='Is this device ready for use?')),
                ('name', models.CharField(default='Authy Push Authentications', help_text='The human-readable name of this device.', max_length=255)),
            ],
            options={
                'verbose_name': 'Authy One Touch Device',
                'verbose_name_plural': 'Authy One Touch Devices',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AuthyUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('authy_id', models.BigIntegerField(unique=True, verbose_name='Authy Id')),
            ],
            options={
                'verbose_name': 'Authy Add User Request',
                'verbose_name_plural': 'Authy Add User Requests',
            },
        ),
        migrations.CreateModel(
            name='StaticDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('throttling_failure_timestamp', models.DateTimeField(blank=True, default=None, help_text='A timestamp of the last failed verification attempt. Null if last attempt succeeded.', null=True)),
                ('throttling_failure_count', models.PositiveIntegerField(default=0, help_text='Number of successive failed attempts.')),
                ('name', models.CharField(default='Backup Code', help_text='The human-readable name of this device.', max_length=64)),
                ('confirmed', models.BooleanField(default=True, help_text='Is this device ready for use?')),
                ('user', models.OneToOneField(help_text='The user that this device belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='static_device', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Static Backup Code Device',
                'verbose_name_plural': 'Static Backup Code Devices',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TwoFactorLoginToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('token', models.CharField(db_index=True, default=two_factor.utils.random_hex_32, help_text='A hex-encoded token.', max_length=128, validators=[two_factor.utils.key_validator])),
                ('devices_last_request', django.contrib.postgres.fields.jsonb.JSONField(default=dict, editable=False, verbose_name='Authy Response')),
                ('user', models.ForeignKey(help_text='The user that this device belongs to.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Two Factor Token',
                'verbose_name_plural': 'User Two Factor Tokens',
            },
        ),
        migrations.CreateModel(
            name='StaticToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(db_index=True, default=two_factor.utils.static_token, max_length=16)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='token_set', to='two_factor.StaticDevice')),
            ],
            options={
                'verbose_name': 'Static Device Token',
                'verbose_name_plural': 'Static Device Tokens',
            },
        ),
        migrations.CreateModel(
            name='PhoneTOTPDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('throttling_failure_timestamp', models.DateTimeField(blank=True, default=None, help_text='A timestamp of the last failed verification attempt. Null if last attempt succeeded.', null=True)),
                ('throttling_failure_count', models.PositiveIntegerField(default=0, help_text='Number of successive failed attempts.')),
                ('confirmed', models.BooleanField(default=False, help_text='Is this device ready for use?')),
                ('name', models.CharField(blank=True, default='', help_text='The human-readable name of this device.', max_length=64)),
                ('key', models.CharField(default=two_factor.utils.random_hex, help_text='A hex-encoded secret key of up to 40 bytes.', max_length=80, validators=[two_factor.utils.key_validator])),
                ('token_timestamp', models.DateTimeField(default=django.utils.timezone.now, help_text='The timestamp of the token generation.')),
                ('event_code', models.CharField(default='', max_length=255, verbose_name='Event Code String')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, unique=True, verbose_name='Phone')),
                ('user', models.ForeignKey(help_text='The user that this device belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='phone_totp_devices', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Phone Totp Device',
                'verbose_name_plural': 'Phone Totp Device',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AuthyOneTouchRequest',
            fields=[
                ('id', models.CharField(default=two_factor.utils.pk_hex, editable=False, max_length=64, primary_key=True, serialize=False, verbose_name='Id')),
                ('authy_request_uuid', models.UUIDField(db_index=True, editable=False)),
                ('event_code', models.CharField(default='', editable=False, max_length=255, verbose_name='Event Code')),
                ('status', models.CharField(default='pending', editable=False, max_length=255, verbose_name='Status')),
                ('issued_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='Issued At')),
                ('seconds_to_expire', models.PositiveSmallIntegerField(editable=False, verbose_name='Seconds To Expire')),
                ('authy_response', django.contrib.postgres.fields.jsonb.JSONField(default=dict, editable=False, verbose_name='Authy Response')),
                ('authy_onetouch_device', models.ForeignKey(editable=False, help_text='The device that this request belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='one_touch_request_set', to='two_factor.AuthyOneTouchDevice')),
            ],
            options={
                'verbose_name': 'Authy One Touch Request',
                'verbose_name_plural': 'Authy One Touch Requests',
            },
        ),
        migrations.AddField(
            model_name='authyonetouchdevice',
            name='authy_user',
            field=models.ForeignKey(help_text='The user that this device belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='authy_one_touch_devices', to='two_factor.AuthyUser'),
        ),
        migrations.AddField(
            model_name='authyonetouchdevice',
            name='user',
            field=models.OneToOneField(help_text='The user that this device belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='authy_one_touch_device', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='AuthyAddUserRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_id', models.CharField(db_index=True, default=two_factor.utils.random_hex_32, help_text='A hex-encoded token.', max_length=128, validators=[two_factor.utils.key_validator], verbose_name='Request Id')),
                ('custom_user_id', models.CharField(default=two_factor.utils.random_hex_32, help_text='A hex-encoded token.', max_length=128, validators=[two_factor.utils.key_validator], verbose_name='Custom User Id')),
                ('issued_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Issued At')),
                ('is_registered', models.BooleanField(default=False, help_text='Is user reregistration complete')),
                ('authy_id', models.CharField(default='', max_length=128, verbose_name='Authy Id')),
                ('user', models.OneToOneField(help_text='The user that this device belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='authy_add_user_request', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Authy Add User Request',
                'verbose_name_plural': 'Authy Add User Requests',
            },
        ),
        migrations.CreateModel(
            name='AuthenticatorTOTPDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('throttling_failure_timestamp', models.DateTimeField(blank=True, default=None, help_text='A timestamp of the last failed verification attempt. Null if last attempt succeeded.', null=True)),
                ('throttling_failure_count', models.PositiveIntegerField(default=0, help_text='Number of successive failed attempts.')),
                ('confirmed', models.BooleanField(default=False, help_text='Is this device ready for use?')),
                ('key', models.CharField(default=two_factor.utils.random_hex, help_text='A hex-encoded secret key of up to 40 bytes.', max_length=80, validators=[two_factor.utils.key_validator])),
                ('step', models.PositiveSmallIntegerField(default=30, help_text='The time step in seconds.')),
                ('t0', models.BigIntegerField(default=0, help_text='The Unix time at which to begin counting steps.')),
                ('digits', models.PositiveSmallIntegerField(choices=[(6, 6), (8, 8)], default=6, help_text='The number of digits to expect in a token.')),
                ('tolerance', models.PositiveSmallIntegerField(default=1, help_text='The number of time steps in the past or future to allow.')),
                ('drift', models.SmallIntegerField(default=0, help_text='The number of time steps the prover is known to deviate from our clock.')),
                ('last_t', models.BigIntegerField(default=-1, help_text='The t value of the latest verified token. must be at a higher time step.')),
                ('name', models.CharField(default='Authenticator App', help_text='The human-readable name of this device.', max_length=64)),
                ('user', models.OneToOneField(help_text='The user that this device belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='authenticator_totp_device', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Authenticator TOTP Device',
                'verbose_name_plural': 'Authenticator TOTP Devices',
                'abstract': False,
            },
        ),
    ]
